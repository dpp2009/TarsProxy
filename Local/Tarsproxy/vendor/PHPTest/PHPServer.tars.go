// Package PHPTest comment
// This file was generated by tars2go 1.1.4
// Generated from PHPServer.tars
package PHPTest

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)

//PHPServer struct
type PHPServer struct {
	s m.Servant
}

//GetActivityInfo is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) GetActivityInfo(inParam *CommonInParam, activityId int64, result *CommonResult, activityInfo *ActivityInfo, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = inParam.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(activityId, 2)
	if err != nil {
		return err
	}

	err = (*result).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*activityInfo).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "getActivityInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*result).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	err = (*activityInfo).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetActivityInfoWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) GetActivityInfoWithContext(tarsCtx context.Context, inParam *CommonInParam, activityId int64, result *CommonResult, activityInfo *ActivityInfo, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = inParam.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(activityId, 2)
	if err != nil {
		return err
	}

	err = (*result).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*activityInfo).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "getActivityInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = (*result).ReadBlock(_is, 3, true)
	if err != nil {
		return err
	}

	err = (*activityInfo).ReadBlock(_is, 4, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//GetActivityInfoOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) GetActivityInfoOneWayWithContext(tarsCtx context.Context, inParam *CommonInParam, activityId int64, result *CommonResult, activityInfo *ActivityInfo, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = inParam.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int64(activityId, 2)
	if err != nil {
		return err
	}

	err = (*result).WriteBlock(_os, 3)
	if err != nil {
		return err
	}

	err = (*activityInfo).WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "getActivityInfo", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//TestTafServer is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestTafServer(_opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testTafServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//TestTafServerWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestTafServerWithContext(tarsCtx context.Context, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testTafServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//TestTafServerOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestTafServerOneWayWithContext(tarsCtx context.Context, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "testTafServer", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//Sleep is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) Sleep(millisecond int64, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int64(millisecond, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "sleep", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SleepWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) SleepWithContext(tarsCtx context.Context, millisecond int64, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int64(millisecond, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "sleep", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SleepOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) SleepOneWayWithContext(tarsCtx context.Context, millisecond int64, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int64(millisecond, 1)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "sleep", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//TestLofofTags is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestLofofTags(tags *LotofTags, outtags *LotofTags, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = tags.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*outtags).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testLofofTags", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*outtags).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//TestLofofTagsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestLofofTagsWithContext(tarsCtx context.Context, tags *LotofTags, outtags *LotofTags, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = tags.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*outtags).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testLofofTags", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*outtags).ReadBlock(_is, 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//TestLofofTagsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestLofofTagsOneWayWithContext(tarsCtx context.Context, tags *LotofTags, outtags *LotofTags, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = tags.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = (*outtags).WriteBlock(_os, 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "testLofofTags", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SayHelloWorld is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) SayHelloWorld(name string, outGreetings *string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string((*outGreetings), 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "sayHelloWorld", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_string(&(*outGreetings), 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SayHelloWorldWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) SayHelloWorldWithContext(tarsCtx context.Context, name string, outGreetings *string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string((*outGreetings), 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "sayHelloWorld", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_string(&(*outGreetings), 2, true)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//SayHelloWorldOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) SayHelloWorldOneWayWithContext(tarsCtx context.Context, name string, outGreetings *string, _opt ...map[string]string) (err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_string(name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string((*outGreetings), 2)
	if err != nil {
		return err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "sayHelloWorld", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return nil
}

//TestBasic is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestBasic(a bool, b int32, c string, d *bool, e *int32, f *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_bool(a, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(b, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(c, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_bool((*d), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*e), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string((*f), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testBasic", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*d), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*e), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*f), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//TestBasicWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestBasicWithContext(tarsCtx context.Context, a bool, b int32, c string, d *bool, e *int32, f *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_bool(a, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(b, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(c, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_bool((*d), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*e), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string((*f), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "testBasic", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_bool(&(*d), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*e), 5, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_string(&(*f), 6, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//TestBasicOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *PHPServer) TestBasicOneWayWithContext(tarsCtx context.Context, a bool, b int32, c string, d *bool, e *int32, f *string, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_bool(a, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(b, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(c, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_bool((*d), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*e), 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string((*f), 6)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "testBasic", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *PHPServer) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *PHPServer) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *PHPServer) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *PHPServer) AddServant(imp _impPHPServer, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *PHPServer) AddServantWithContext(imp _impPHPServerWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impPHPServer interface {
	GetActivityInfo(inParam *CommonInParam, activityId int64, result *CommonResult, activityInfo *ActivityInfo) (err error)
	TestTafServer() (err error)
	Sleep(millisecond int64) (err error)
	TestLofofTags(tags *LotofTags, outtags *LotofTags) (ret int32, err error)
	SayHelloWorld(name string, outGreetings *string) (err error)
	TestBasic(a bool, b int32, c string, d *bool, e *int32, f *string) (ret int32, err error)
}
type _impPHPServerWithContext interface {
	GetActivityInfo(tarsCtx context.Context, inParam *CommonInParam, activityId int64, result *CommonResult, activityInfo *ActivityInfo) (err error)
	TestTafServer(tarsCtx context.Context) (err error)
	Sleep(tarsCtx context.Context, millisecond int64) (err error)
	TestLofofTags(tarsCtx context.Context, tags *LotofTags, outtags *LotofTags) (ret int32, err error)
	SayHelloWorld(tarsCtx context.Context, name string, outGreetings *string) (err error)
	TestBasic(tarsCtx context.Context, a bool, b int32, c string, d *bool, e *int32, f *string) (ret int32, err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *PHPServer) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "getActivityInfo":
		var inParam CommonInParam
		var activityId int64
		var result CommonResult
		var activityInfo ActivityInfo

		if tarsReq.IVersion == basef.TARSVERSION {

			err = inParam.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int64(&activityId, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("inParam", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = inParam.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("activityId", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int64(&activityId, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["inParam"])
				if err = json.Unmarshal([]byte(_jsonStr_), &inParam); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["activityId"])
				if err = json.Unmarshal([]byte(_jsonStr_), &activityId); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impPHPServer)
			err = _imp.GetActivityInfo(&inParam, activityId, &result, &activityInfo)
		} else {
			_imp := _val.(_impPHPServerWithContext)
			err = _imp.GetActivityInfo(tarsCtx, &inParam, activityId, &result, &activityInfo)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = result.WriteBlock(_os, 3)
			if err != nil {
				return err
			}

			err = activityInfo.WriteBlock(_os, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = result.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = activityInfo.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("activityInfo", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["result"] = result
			_rspJson_["activityInfo"] = activityInfo

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "testTafServer":

		if _withContext == false {
			_imp := _val.(_impPHPServer)
			err = _imp.TestTafServer()
		} else {
			_imp := _val.(_impPHPServerWithContext)
			err = _imp.TestTafServer(tarsCtx)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "sleep":
		var millisecond int64

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int64(&millisecond, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("millisecond", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int64(&millisecond, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["millisecond"])
				if err = json.Unmarshal([]byte(_jsonStr_), &millisecond); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impPHPServer)
			err = _imp.Sleep(millisecond)
		} else {
			_imp := _val.(_impPHPServerWithContext)
			err = _imp.Sleep(tarsCtx, millisecond)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "testLofofTags":
		var tags LotofTags
		var outtags LotofTags

		if tarsReq.IVersion == basef.TARSVERSION {

			err = tags.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("tags", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = tags.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["tags"])
				if err = json.Unmarshal([]byte(_jsonStr_), &tags); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPHPServer)
			_funRet_, err = _imp.TestLofofTags(&tags, &outtags)
		} else {
			_imp := _val.(_impPHPServerWithContext)
			_funRet_, err = _imp.TestLofofTags(tarsCtx, &tags, &outtags)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = outtags.WriteBlock(_os, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = outtags.WriteBlock(_os, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("outtags", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["outtags"] = outtags

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "sayHelloWorld":
		var name string
		var outGreetings string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_string(&name, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("name", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&name, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["name"])
				if err = json.Unmarshal([]byte(_jsonStr_), &name); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		if _withContext == false {
			_imp := _val.(_impPHPServer)
			err = _imp.SayHelloWorld(name, &outGreetings)
		} else {
			_imp := _val.(_impPHPServerWithContext)
			err = _imp.SayHelloWorld(tarsCtx, name, &outGreetings)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_string(outGreetings, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			_os.Reset()
			err = _os.Write_string(outGreetings, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("outGreetings", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["outGreetings"] = outGreetings

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "testBasic":
		var a bool
		var b int32
		var c string
		var d bool
		var e int32
		var f string

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_bool(&a, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&b, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&c, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("a", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_bool(&a, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("b", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&b, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("c", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&c, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			err = json.Unmarshal(_is.ToBytes(), &_jsonDat_)
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["a"])
				if err = json.Unmarshal([]byte(_jsonStr_), &a); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["b"])
				if err = json.Unmarshal([]byte(_jsonStr_), &b); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["c"])
				if err = json.Unmarshal([]byte(_jsonStr_), &c); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version:", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impPHPServer)
			_funRet_, err = _imp.TestBasic(a, b, c, &d, &e, &f)
		} else {
			_imp := _val.(_impPHPServerWithContext)
			_funRet_, err = _imp.TestBasic(tarsCtx, a, b, c, &d, &e, &f)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_bool(d, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(e, 5)
			if err != nil {
				return err
			}

			err = _os.Write_string(f, 6)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_bool(d, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("d", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(e, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("e", _os.ToBytes())

			_os.Reset()
			err = _os.Write_string(f, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("f", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["d"] = d
			_rspJson_["e"] = e
			_rspJson_["f"] = f

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
